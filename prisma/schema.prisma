// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

/// @seed="node scripts/seed.js"

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// User management
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // NextAuth relations
  accounts      Account[]
  sessions      Session[]

  // Relations
  assignedForms     FormSubmission[] @relation("AssignedUser")
  authoredContent  ContentItem[]
  formResponses    FormResponse[]
  notifications    Notification[]
  updatedPages     PageContent[]
  managedProjects  Project[]        @relation("ProjectManager")

  @@map("users")
}

enum UserRole {
  ADMIN
  EDITOR
  USER
}

// Projects
model Project {
  id              String        @id @default(cuid())
  title           String
  description     String?
  customerName    String
  customerEmail   String?
  customerPhone   String?
  projectType     ProjectType
  status          ProjectStatus @default(PLANNING)
  priority        ProjectPriority @default(MEDIUM)
  location        String?
  startDate       DateTime?
  endDate         DateTime?
  estimatedHours  Int?
  actualHours     Int?
  budget          Float?
  actualCost      Float?
  progress        Int            @default(0) // 0-100 percentage
  notes           String?
  attachments     String         // JSON string of file URLs
  tags            String         // JSON string of tags
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  manager         User           @relation("ProjectManager", fields: [managerId], references: [id])
  managerId       String

  @@map("projects")
}

enum ProjectType {
  ELECTRICAL
  HVAC
  REFRIGERATION
  MAINTENANCE
  INSTALLATION
  REPAIR
  UPGRADE
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Form submissions
model FormSubmission {
  id          String           @id @default(cuid())
  type        FormType
  submittedAt DateTime         @default(now())
  status      FormStatus       @default(NEW)
  priority    FormPriority     @default(MEDIUM)
  customerInfo String          // JSON string of customer information
  formData    String           // JSON string of form data
  notes       String?
  lastUpdated DateTime         @updatedAt
  createdAt   DateTime         @default(now())

  // Relations
  responses   FormResponse[]
  assignedTo User?             @relation("AssignedUser", fields: [assignedToId], references: [id])
  assignedToId String?
  tags       String            // JSON string of tags

  @@map("form_submissions")
}

enum FormType {
  CONTACT
  SERVICE_INQUIRY
  QUOTE_REQUEST
}

enum FormStatus {
  NEW
  IN_PROGRESS
  RESPONDED
  COMPLETED
  ARCHIVED
}

enum FormPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Form responses
model FormResponse {
  id           String       @id @default(cuid())
  formId       String
  respondedBy  String
  respondedAt  DateTime     @default(now())
  method       ResponseMethod
  content      String
  attachments  String       // JSON string of file URLs
  createdAt    DateTime     @default(now())

  // Relations
  form         FormSubmission @relation(fields: [formId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [respondedBy], references: [id])

  @@map("form_responses")
}

enum ResponseMethod {
  EMAIL
  PHONE
  IN_PERSON
}

// Content management
model ContentItem {
  id             String        @id @default(cuid())
  type           ContentType
  title          String
  slug           String        @unique
  content        String
  excerpt        String?
  status         ContentStatus @default(DRAFT)
  publishedAt    DateTime?
  scheduledFor   DateTime?
  author         String
  tags           String        // JSON string of tags
  categories     String        // JSON string of categories
  featuredImage  String?
  seoTitle       String?
  seoDescription String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  user           User          @relation(fields: [author], references: [id])
  blogPost       BlogPost?

  @@map("content_items")
}

enum ContentType {
  BLOG_POST
  TESTIMONIAL
  PORTFOLIO_ITEM
  PAGE_CONTENT
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
}

// Blog posts (extends ContentItem)
model BlogPost {
  id          String   @id @default(cuid())
  contentId   String   @unique
  readingTime Int?
  viewCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  content     ContentItem @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@map("blog_posts")
}

// Testimonials
model Testimonial {
  id             String   @id @default(cuid())
  customerName   String
  customerTitle  String?
  customerCompany String?
  customerPhoto  String?
  testimonialText String
  rating         Int?
  projectType    String?
  isVisible      Boolean  @default(true)
  isFeatured     Boolean  @default(false)
  displayOrder   Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("testimonials")
}

// Portfolio items
model PortfolioItem {
  id              String           @id @default(cuid())
  title           String
  description     String
  serviceCategory ServiceCategory
  images          String           // JSON string of image URLs
  thumbnailImage  String
  completionDate  DateTime
  clientName      String?
  projectValue    Float?
  location        String?
  tags            String           // JSON string of tags
  isVisible       Boolean          @default(true)
  isFeatured      Boolean          @default(false)
  displayOrder    Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@map("portfolio_items")
}

enum ServiceCategory {
  ELECTRICAL
  HVAC
  REFRIGERATION
}

// Page content
model PageContent {
  id             String   @id @default(cuid())
  slug           String   @unique
  title          String
  content        String
  metaTitle      String?
  metaDescription String?
  lastUpdated    DateTime @updatedAt
  updatedBy      String
  createdAt      DateTime @default(now())

  // Relations
  user           User     @relation(fields: [updatedBy], references: [id])

  @@map("page_content")
}

// Notifications
model Notification {
  id       String           @id @default(cuid())
  type     NotificationType
  title    String
  message  String
  timestamp DateTime        @default(now())
  isRead   Boolean         @default(false)
  priority NotificationPriority @default(MEDIUM)
  actionUrl String?
  metadata String?         // JSON string of additional metadata
  createdAt DateTime       @default(now())

  // Relations
  userId   String
  user     User             @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum NotificationType {
  FORM_SUBMISSION
  CONTENT_PUBLISHED
  REMINDER
  SYSTEM
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Business information
model BusinessInfo {
  id                String   @id @default(cuid())
  companyName       String
  tagline           String?
  description       String
  address           String?
  phone             String?
  email             String?
  website           String?
  logo              String?
  socialMedia       String?  // JSON string of social media links
  businessHours     String?  // JSON string of business hours
  services          String?  // JSON string of service descriptions
  updatedAt         DateTime @updatedAt
  updatedBy         String

  @@map("business_info")
}

// Settings
model Settings {
  id                    String   @id @default(cuid())
  key                   String   @unique
  value                 String
  description           String?
  isPublic             Boolean  @default(false)
  updatedAt             DateTime @updatedAt
  updatedBy             String

  @@map("settings")
}
